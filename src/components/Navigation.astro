---
import { getLangFromUrl, useTranslations, getLocalizedPath } from '../i18n/utils';
import { languages } from '../i18n/config';
import LanguageSwitcher from './LanguageSwitcher.astro';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<nav class="fixed top-0 w-full bg-white/80 dark:bg-gray-900/80 backdrop-blur-md z-50 border-b border-gray-200 dark:border-gray-700">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a href={getLocalizedPath('/', lang)} class="text-xl font-bold text-primary-600 hover:text-primary-700 transition-colors">
          Guilhermo Gonz√°lez
        </a>
      </div>
      
      <!-- Desktop Navigation -->
      <div class="hidden md:flex md:flex-1 md:justify-center">
        <div class="flex items-center space-x-8">
          <a href={getLocalizedPath('/#home', lang)} class="nav-link">{t('nav.home')}</a>
          <a href={getLocalizedPath('/#about', lang)} class="nav-link">{t('nav.about')}</a>
          <a href={getLocalizedPath('/#experience', lang)} class="nav-link">{t('nav.experience')}</a>
          <!-- <a href={getLocalizedPath('/#projects', lang)} class="nav-link">{t('nav.projects')}</a> -->
          <a href={getLocalizedPath('/#contact', lang)} class="nav-link">{t('nav.contact')}</a>
        </div>
      </div>
      
      <!-- Language Switcher -->
      <div class="flex items-center space-x-4">
        <LanguageSwitcher />
        
        <!-- Mobile menu button -->
        <div class="md:hidden">
          <button id="mobile-menu-button" class="p-2 rounded-md text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-700">
            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </button>
        </div>
      </div>
    </div>
    
    <!-- Mobile Navigation -->
    <div id="mobile-menu" class="md:hidden hidden">
      <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3 border-t border-gray-200 dark:border-gray-700">
        <a href={getLocalizedPath('/#home', lang)} class="mobile-nav-link">{t('nav.home')}</a>
        <a href={getLocalizedPath('/#about', lang)} class="mobile-nav-link">{t('nav.about')}</a>
        <a href={getLocalizedPath('/#experience', lang)} class="mobile-nav-link">{t('nav.experience')}</a>
        <!-- <a href={getLocalizedPath('/#projects', lang)} class="mobile-nav-link">{t('nav.projects')}</a> -->
        <a href={getLocalizedPath('/#contact', lang)} class="mobile-nav-link">{t('nav.contact')}</a>
      </div>
    </div>
  </div>
</nav>

<style>
  .nav-link {
    @apply text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 px-3 py-2 rounded-md text-sm font-medium transition-colors;
  }
  
  .mobile-nav-link {
    @apply text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 block px-3 py-2 rounded-md text-base font-medium transition-colors;
  }
</style>

<script>
  // Mobile menu toggle
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  
  mobileMenuButton?.addEventListener('click', () => {
    mobileMenu?.classList.toggle('hidden');
  });
  
  // Close mobile menu when clicking outside
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    if (!mobileMenuButton?.contains(target) && !mobileMenu?.contains(target)) {
      mobileMenu?.classList.add('hidden');
    }
  });
  
  // Smooth scrolling for anchor links
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
      e.preventDefault();
      const href = this.getAttribute('href');
      if (href) {
        const target = document.querySelector(href.split('#')[1] ? '#' + href.split('#')[1] : href);
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth'
          });
        }
      }
    });
  });
</script>
